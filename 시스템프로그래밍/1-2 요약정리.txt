Vi는 한 화면을 편집하는 비주얼 에디터라는 뜻
컴파일은 전처리, 컴파일, 어셈블리, 링킹의 과정
프로젝트를 효율적이고 일관성 있게 관리하기 위해 Makefile이라는 형식을 사용


1. Vi editor

1976년 빌 조이가 초기 BSD 릴리즈에 포함된 편집기로 만듦
비주엘 에디터라는 뜻에서 유래
간결하면서 강력한 기능으로 열광적인 사용자 보유
Emascs와 함께 유닉스 환경에서 가장 많이 쓰이는 문서 편집기

vi는 텍스트를 편집하는 입력모드, 명령어를 입력하는 명령모드, 저장 및 기타 명령을 입력하는 쉘 모드가 있다.

명령 모드에서 입력모드로 들어가는 방법 : a, i, o , A, I, O 그 반대는 Esc
명령 모드에서 쉘모드로 들어가는 방법 : ?,/,: 그 반대는 Esc, Enter, Back Space

명령 모드에서 가능한 작업
이동, 삭제, 검색, 치환,저장 종료, 열기

입력 모드에서 가능한 작업
문서의 실질적인 입력 가능

쉘 모드에서 가능한 작업
검색, 치환, 저장, 종료, 열기 등의 작업이 가능

:set nu 행 번호 표시
:set nonu 행 번호 표시 제거
/검색할문자열/ 오른쪽 아래 방향으로 문자열 검색
?검색할문자열? 오른쪽 위 방향으로 문자열 검색
:s/aaa/bbb 현재 행의 str을 rep로 대체
:1,s/aaa/bbb 1부터 현재 행의 str을 rep으로 대체
:%s/aaa/bbb/g 파일 전체 str을 rep로 전부 대체
:.$/aaa/bbb 커서 위치로부터 파일 끝까지 있는 모든 aaa를 bbb로 대체


2. gcc와 Make

GCC : CNU C Compiler -> GNU Compiler Collection
리처드 스톨만이 1987년 GNU 프로젝트의 컴파일러로 작성
GNU 시스템의 공식 컴파일러
무료 소프트웨이이지만 품질과 이식성이 매우 훌륭
대부분의 최신 DOS버전에서도 동작
현재는 gcc 4.X.X 버전까지 배포
gcc4.1.1 버전은 Ada, C, C++, Fortran, Java, Objective-C를 지원

gcc의 출력 과정
Compile은 전처리 > 컴파일 > 어셈블리 > 링킹의 과정을 거침

1단계 Macro C Source (*.c): 매크로 프로세서를 처리하는 과정
2단계 C Source(*.c) : 매크로 처리된 C언어를 컴파일하는 과정
3단계 Assembly Source(*.s) : 컴파일 된 결과물인 어셈블리 코드를 오브젝트로 변환하는 과정
4단계 Binart(*.o) : 오브젝트들을 서로 묶어주는 과정
5단계 Binary(*.so / *.o) : 묶은 오브젝트들을 메모리에서 돌아가도록 로더를 붙이는 과정

기본적인 사용법

gcc -v : gcc 버전의 상세 정보
gcc hello.c hello.c 파일을 컴파일

-c :링킹 단계 앞에서 컴파일 과정을 멈춤
-E : 전처리 과정 후 컴파일을 종료
-o file : file에 출력
-S : 어셈블러 코드를 작성한 후에 컴파일 과정을 멈춤


Make 유틸리티의 역할

각각의 파일을 명령행으로 처리하는 번거로움을 해소 함
Makefile이라는 형식을 사용
현재 디렉토리의 Makefile 또는 Makefile이라는 일정한 규칙을 준수
만든 파일의 내용을 읽어서 목표(target) 파일을 만듬

요약

vi editor
한 줄씩 편집하는 줄 단위 편집기가 아니라 한 화면을 편집하는 비주얼 에디터
명령,입력,쉘 모드 존재
gcc
자유 소프트웨어 재단에서 이끄는 GNU 프로젝트
GNU 시스템의 공식 컴파일러로, 무료 소프트웨어이지만 품질과 이식성이 매우 훌륭함

Make
소스파일이 많은 프로젝트의 경우, 각각의 파일을 명령행으로 처리하는 번거로움을 해소 할 수 있는 유틸
일반적으로 현재 디렉터리의 Makefile 또는 Makefile이라는 일정한 규칙을 준수



